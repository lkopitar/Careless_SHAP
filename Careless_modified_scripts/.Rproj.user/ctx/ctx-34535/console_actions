{
    "type": [
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2
    ],
    "data": [
        "\nR version 4.0.3 (2020-10-10) -- \"Bunny-Wunnies Freak Out\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "# ------------------------------------------",
        "> ",
        "# ",
        "> ",
        "# ------------------------------------------",
        "> ",
        "library(foreach)",
        "> ",
        "library(iterators)",
        "> ",
        "library(doParallel)",
        "Loading required package: parallel\n",
        "> ",
        "library(tidyverse)",
        "\u001B[30m-- \u001B[1mAttaching packages\u001B[22m -------------------------------------------------------------------------------- tidyverse 1.3.0 --\u001B[39m\n",
        "\u001B[30m\u001B[32m<U+221A>\u001B[30m \u001B[34mggplot2\u001B[30m 3.3.2     \u001B[32m<U+221A>\u001B[30m \u001B[34mpurrr  \u001B[30m 0.3.4\n\u001B[32m<U+221A>\u001B[30m \u001B[34mtibble \u001B[30m 3.0.4     \u001B[32m<U+221A>\u001B[30m \u001B[34mdplyr  \u001B[30m 1.0.2\n\u001B[32m<U+221A>\u001B[30m \u001B[34mtidyr  \u001B[30m 1.1.2     \u001B[32m<U+221A>\u001B[30m \u001B[34mstringr\u001B[30m 1.4.0\n\u001B[32m<U+221A>\u001B[30m \u001B[34mreadr  \u001B[30m 1.4.0     \u001B[32m<U+221A>\u001B[30m \u001B[34mforcats\u001B[30m 0.5.0\u001B[39m\n",
        "\u001B[30m-- \u001B[1mConflicts\u001B[22m ----------------------------------------------------------------------------------- tidyverse_conflicts() --\n\u001B[31mx\u001B[30m \u001B[34mpurrr\u001B[30m::\u001B[32maccumulate()\u001B[30m masks \u001B[34mforeach\u001B[30m::accumulate()\n\u001B[31mx\u001B[30m \u001B[34mdplyr\u001B[30m::\u001B[32mfilter()\u001B[30m     masks \u001B[34mstats\u001B[30m::filter()\n\u001B[31mx\u001B[30m \u001B[34mdplyr\u001B[30m::\u001B[32mlag()\u001B[30m        masks \u001B[34mstats\u001B[30m::lag()\n\u001B[31mx\u001B[30m \u001B[34mpurrr\u001B[30m::\u001B[32mwhen()\u001B[30m       masks \u001B[34mforeach\u001B[30m::when()\u001B[39m\n",
        "> ",
        "library(caret)",
        "Loading required package: lattice\n",
        "\nAttaching package: ‘caret’\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    lift\n\n",
        "> ",
        "library(gbm)",
        "Loaded gbm 2.1.8\n",
        "> ",
        "library(data.table)",
        "data.table 1.13.4 using 12 threads (see ?getDTthreads).  Latest news: r-datatable.com\n",
        "\nAttaching package: ‘data.table’\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    between, first, last\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    transpose\n\n",
        "> ",
        "library(parallel)",
        "> ",
        "library(dplyr)",
        "> ",
        "cl <- parallel::makeCluster(6)",
        "> ",
        "doParallel::registerDoParallel(cl)",
        "> ",
        "i_start <- 1",
        "> ",
        "i_end <- 10",
        "> ",
        "n_rr_test <- 162",
        "> ",
        "n_cr_test <- 18",
        "> ",
        "res <- NULL",
        "> ",
        "for(i in i_start:i_end) {",
        "+ ",
        "print(i)",
        "+ ",
        "  dat <- read.csv2('data_mod_resp_rt.csv') %>% ",
        "+ ",
        "  data.table() %>%",
        "+ ",
        "  mutate(id = row_number()) %>% ",
        "+ ",
        "  group_split(., Careless)",
        "+ ",
        "  ",
        "+ ",
        "  # regular",
        "+ ",
        "  set.seed(10121976+i)",
        "+ ",
        "  test_set_rr <- dat[[1]] %>% sample_n(., n_rr_test, replace = F)",
        "+ ",
        "  train_set_rr  <- anti_join(dat[[1]], test_set_rr, by = 'id')",
        "+ ",
        "  ",
        "+ ",
        "  # careless",
        "+ ",
        "  set.seed(10121976+i)",
        "+ ",
        "  test_set_cr <- dat[[2]] %>% sample_n(., n_cr_test, replace = F)",
        "+ ",
        "  train_set_cr  <- anti_join(dat[[2]], test_set_cr, by = 'id')",
        "+ ",
        "  ",
        "+ ",
        "  test_set <- rbind(test_set_rr, test_set_cr) %>% ",
        "+ ",
        "    dplyr::select(., -id) %>% ",
        "+ ",
        "    sample_frac(.)",
        "+ ",
        "  ",
        "+ ",
        "  train_set <- rbind(train_set_rr, train_set_cr) %>% ",
        "+ ",
        "    dplyr::select(., -id) %>% ",
        "+ ",
        "    sample_frac(.)",
        "+ ",
        "  ",
        "+ ",
        "  # http://topepo.github.io/caret/model-training-and-tuning.html",
        "+ ",
        "  # For a gradient boosting machine (GBM) model, there are three main tuning parameters:",
        "+ ",
        "  # * number of iterations, i.e. trees, (called n.trees in the gbm function)",
        "+ ",
        "  # * complexity of the tree, called interaction.depth",
        "+ ",
        "  # * learning rate: how quickly the algorithm adapts, called shrinkage",
        "+ ",
        "  # * the minimum number of training set samples in a node to commence splitting (n.minobsinnode)",
        "+ ",
        "  ",
        "+ ",
        "  my_grid <- expand.grid(interaction.depth = c(2,3,4),",
        "+ ",
        "                         n.minobsinnode = 4:10,",
        "+ ",
        "                         n.trees = (5:16)*50,",
        "+ ",
        "                         shrinkage = seq(.001, .03, .002))",
        "+ ",
        "",
        "+ ",
        "  my_grid <- expand.grid(interaction.depth = c(2),",
        "+ ",
        "                         n.minobsinnode = 4:5,",
        "+ ",
        "                         n.trees = (5:6)*50,",
        "+ ",
        "                         shrinkage = seq(.001))",
        "+ ",
        "  ",
        "+ ",
        "  # negative Log Loss with classProbs = TRUE",
        "+ ",
        "  train_set$Careless <- ifelse(train_set$Careless == 0, 'zeros', 'ones')",
        "+ ",
        "  train_set$Careless <- factor(train_set$Careless)",
        "+ ",
        "  train_set$Careless <- relevel(train_set$Careless, ref = 'zeros')",
        "+ ",
        "  ",
        "+ ",
        "  # https://www.r-bloggers.com/dealing-with-unbalanced-data-in-machine-learning/",
        "+ ",
        "  gbm_class <- train(Careless ~ ., data = train_set, ",
        "+ ",
        "                     method = 'gbm',",
        "+ ",
        "                     metric  = 'logLoss',",
        "+ ",
        "                     trControl = trainControl(method = 'cv',",
        "+ ",
        "                                              number = 10,",
        "+ ",
        "                                              summaryFunction = mnLogLoss,",
        "+ ",
        "                                              classProbs = TRUE,",
        "+ ",
        "                                              trim = TRUE,",
        "+ ",
        "                                              returnData = FALSE,",
        "+ ",
        "                                              allowParallel = TRUE,",
        "+ ",
        "                                              sampling = \"up\"),",
        "+ ",
        "                     tuneGrid = my_grid,",
        "+ ",
        "                     verbose = FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  # plot(gbm_class)",
        "+ ",
        "  # print(gbm_class)",
        "+ ",
        "  ",
        "+ ",
        "  gbm_class_preds <- predict(gbm_class, test_set)",
        "+ ",
        "  gbm_class_preds <- ifelse(gbm_class_preds == 'zeros', 0, 1)",
        "+ ",
        "  gbm_class_preds <- factor(gbm_class_preds)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  (cm <- confusionMatrix(",
        "+ ",
        "    data = gbm_class_preds,",
        "+ ",
        "    reference = factor(test_set$Careless),",
        "+ ",
        "    positive = '1'))",
        "+ ",
        " ",
        "+ ",
        " rm(test_set)",
        "+ ",
        " rm(train_set)",
        "+ ",
        " rm(dat)",
        "+ ",
        " gc()",
        "+ ",
        " ",
        "+ ",
        " res <- rbind(res, data.frame(i, t(data.frame(c( round(cm$overall, 12),",
        "+ ",
        "                                      round(cm$byClass, 12) )))))",
        "+ ",
        "",
        "+ ",
        "}",
        "[1] 1\n",
        "Error: package e1071 is required\n",
        "\nRestarting R session...\n\n"
    ]
}